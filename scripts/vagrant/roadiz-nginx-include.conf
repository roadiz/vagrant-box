location = /favicon.ico { log_not_found off; access_log off; }
location = /robots.txt  { allow all; access_log off; log_not_found off; }

# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
location ~ /\.ht {
  deny all;
}
location ~ /\.git {
  deny all;
}
location ~ /themes/(.+)\.(php|yml|twig|xlf|rzn|rzt|rzg)$ {
  deny all;
}
location ~ /themes/([^/.]+)/(Resources|Command|Tests|Controllers|Entities|Form|Model|Services)/ {
  deny all;
}

location ~* ^/themes/*.*\.(?:ico|css|js|woff2?|eot|ttf|otf|svg|gif|jpe?g|png)$ {
  expires 30d;
  access_log off;
  add_header "Pragma" "public";
  add_header "Cache-Control" "public";
  add_header "Vary" "Accept-Encoding";
  add_header "X-Frame-Options" "SAMEORIGIN";
  add_header "X-XSS-Protection" "1; mode=block";
  add_header "X-Content-Type-Options" "nosniff";

  if ($request_method = 'GET') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
  }
}

location ~* ^/files/*.*\.(?:ico|gif|jpe?g|png)$ {
  expires 15d;
  access_log off;
  add_header "Pragma" "public";
  add_header "Cache-Control" "public";
  add_header "Vary" "Accept-Encoding";
  add_header "X-Frame-Options" "SAMEORIGIN";
  add_header "X-XSS-Protection" "1; mode=block";
  add_header "X-Content-Type-Options" "nosniff";

  if ($request_method = 'GET') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
  }
}

location / {
  # First attempt to serve request as file, then
  # as directory, then fall back to front-end controller
  # (do not forget to pass GET parameters).
  try_files $uri $uri/ /index.php$is_args$args;
}

error_page 404 /error-404.html;
location = /error-404.html {
  root /var/www;
  internal;
}

error_page 500 502 503 504 /error-50x.html;
location = /error-50x.html {
  root /var/www;
  internal;
}

location ~ ^/(dev|install|preview|clear_cache)\.php(/|$) {
  fastcgi_pass unix:/var/run/php7.2-fpm.sock;
  fastcgi_split_path_info ^(.+\.php)(/.*)$;
  include fastcgi_params;
  # When you are using symlinks to link the document root to the
  # current version of your application, you should pass the real
  # application path instead of the path to the symlink to PHP
  # FPM.
  # Otherwise, PHP's OPcache may not properly detect changes to
  # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
  # for more information).
  fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
  fastcgi_param DOCUMENT_ROOT $realpath_root;
}

location ~ ^/index\.php(/|$) {
  fastcgi_pass unix:/var/run/php7.2-fpm.sock;
  fastcgi_split_path_info ^(.+\.php)(/.*)$;
  include fastcgi_params;
  # When you are using symlinks to link the document root to the
  # current version of your application, you should pass the real
  # application path instead of the path to the symlink to PHP
  # FPM.
  # Otherwise, PHP's OPcache may not properly detect changes to
  # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
  # for more information).
  fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
  fastcgi_param DOCUMENT_ROOT $realpath_root;
  # Prevents URIs that include the front controller. This will 404:
  # http://domain.tld/app.php/some-path
  # Remove the internal directive to allow URIs like this
  internal;
}

# return 404 for all other php files not matching the front controller
# this prevents access to other php files you don't want to be accessible.
location ~ \.php$ {
  return 404;
}
